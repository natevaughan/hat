/*
 * This file is generated by jOOQ.
 */
package com.natevaughan.kchat.domain.jooq.tables;


import com.natevaughan.kchat.domain.jooq.Indexes;
import com.natevaughan.kchat.domain.jooq.Kchat;
import com.natevaughan.kchat.domain.jooq.Keys;
import com.natevaughan.kchat.domain.jooq.tables.records.KchatUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KchatUser extends TableImpl<KchatUserRecord> {

    private static final long serialVersionUID = -2060533784;

    /**
     * The reference instance of <code>kchat.kchat_user</code>
     */
    public static final KchatUser KCHAT_USER = new KchatUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KchatUserRecord> getRecordType() {
        return KchatUserRecord.class;
    }

    /**
     * The column <code>kchat.kchat_user.chat_id</code>.
     */
    public final TableField<KchatUserRecord, Long> CHAT_ID = createField("chat_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>kchat.kchat_user.participants_id</code>.
     */
    public final TableField<KchatUserRecord, Long> PARTICIPANTS_ID = createField("participants_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>kchat.kchat_user</code> table reference
     */
    public KchatUser() {
        this(DSL.name("kchat_user"), null);
    }

    /**
     * Create an aliased <code>kchat.kchat_user</code> table reference
     */
    public KchatUser(String alias) {
        this(DSL.name(alias), KCHAT_USER);
    }

    /**
     * Create an aliased <code>kchat.kchat_user</code> table reference
     */
    public KchatUser(Name alias) {
        this(alias, KCHAT_USER);
    }

    private KchatUser(Name alias, Table<KchatUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private KchatUser(Name alias, Table<KchatUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> KchatUser(Table<O> child, ForeignKey<O, KchatUserRecord> key) {
        super(child, key, KCHAT_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kchat.KCHAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KCHAT_USER_FKTIA7RMNDE3JP9CHS, Indexes.KCHAT_USER_FKWNOLJBCORVGUUN0P);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<KchatUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<KchatUserRecord, ?>>asList(Keys.FKWNOLJBCORVGUUN0P, Keys.FKTIA7RMNDE3JP9CHS);
    }

    public Chat chat() {
        return new Chat(this, Keys.FKWNOLJBCORVGUUN0P);
    }

    public User user() {
        return new User(this, Keys.FKTIA7RMNDE3JP9CHS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KchatUser as(String alias) {
        return new KchatUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KchatUser as(Name alias) {
        return new KchatUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KchatUser rename(String name) {
        return new KchatUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KchatUser rename(Name name) {
        return new KchatUser(name, null);
    }
}
